// server/bot_service/handlers.js

// 1. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (BOT_TOKEN, API_BASE, SITE_URL —Ç–æ—â–æ)
require('dotenv').config({ path: __dirname + '/../info.env' });

const { session } = require('telegraf');
const axios       = require('axios');

module.exports = (bot) => {
  // 2. –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ session-middleware –¥–ª—è –≤—Å—ñ—Ö –æ–Ω–æ–≤–ª–µ–Ω—å
  bot.use(session());

  const API      = process.env.API_BASE;    // –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: http://localhost:5000/api
  const SITE_URL = process.env.SITE_URL;    // –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: https://example.com

  // –î–æ–ø–æ–º—ñ–∂–Ω–∞: –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —á–∞—Ç—ñ–≤
  async function showChats(ctx) {
    const userId = ctx.from.id;
    try {
      const res   = await axios.get(`${API}/chats`, { params: { userId } });
      const chats = res.data;
      if (!chats.length) {
        return ctx.reply('–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —á–∞—Ç—ñ–≤. –ü–æ—á–Ω—ñ—Ç—å —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ —Å–∞–π—Ç.');
      }
      const keyboard = chats.map(c => [
        { text: c.other_username, callback_data: `chat_${c.chat_id}` }
      ]);
      await ctx.reply('–í–∞—à—ñ —á–∞—Ç–∏:', {
        reply_markup: { inline_keyboard: keyboard }
      });
    } catch (err) {
      console.error('‚ùå Error fetching chats:', err);
      ctx.reply('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —á–∞—Ç—ñ–≤.');
    }
  }

  // –î–æ–ø–æ–º—ñ–∂–Ω–∞: –≤—ñ–¥–∫—Ä–∏—Ç–∏ —á–∞—Ç —Ç–∞ –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  async function openChat(ctx, chatId, offset = 0) {
    // –°–µ—Å—ñ—è –º–æ–∂–µ –±—É—Ç–∏ —â–µ –Ω–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –Ω–∞ callback_query, —Ç–æ–º—É –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ:
    ctx.session = ctx.session || {};
    ctx.session.chatId = chatId;
    ctx.session.offset = offset;

    try {
      const res      = await axios.get(
        `${API}/chats/${chatId}/messages`,
        { params: { offset, limit: 50 } }
      );
      const messages = res.data;

      // –ö–Ω–æ–ø–∫–∞ ¬´–ü—Ä–∏—Å–ª–∞—Ç–∏ —â–µ¬ª —è–∫—â–æ –±—ñ–ª—å—à–µ 50
      if (messages.length === 50) {
        const moreMsg = await ctx.reply('üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —â–µ:', {
          reply_markup: {
            inline_keyboard: [[
              { text: 'üìÑ –ü—Ä–∏—Å–ª–∞—Ç–∏ —â–µ', callback_data: `more_${chatId}_${offset + 50}` }
            ]]
          }
        });
        ctx.session.moreMsgId = moreMsg.message_id;
      }

      // –í—ñ–¥—Å–∏–ª–∞–Ω–Ω—è —Å–∞–º–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó
      let lastSender = null;
      for (const m of messages) {
        if (m.sender_name !== lastSender) {
          await ctx.reply(`‚Äî ${m.sender_name} ‚Äî`);
          lastSender = m.sender_name;
        }
        await ctx.reply(m.content);
      }

      // –ü—ñ—Å–ª—è –ø–µ—Ä—à–æ—ó –ø–∞—Ä—Ç—ñ—ó (offset===0) –≤–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥–ø–∏—Å
      if (offset === 0) {
        await ctx.reply('‚Äî –û—Å—å —Ä–æ–∑–º–æ–≤–∞ –∑ —Ü–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º ‚Äî');
      }
    } catch (err) {
      console.error('‚ùå Error fetching messages:', err);
      ctx.reply('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É.');
    }
  }

  // –ì–æ–ª–æ–≤–Ω–∏–π /start: –±–µ–∑ payload ‚Äì —Ç—ñ–ª—å–∫–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞ —Å–∞–π—Ç; –∑ payload ‚Äì –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —á–∞—Ç
  bot.start(async (ctx) => {
    const payload = ctx.startPayload;
    if (payload) {
      return openChat(ctx, payload, 0);
    }
    // –ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —î–¥–∏–Ω–æ—é –∫–Ω–æ–ø–∫–æ—é –Ω–∞ —Å–∞–π—Ç
    try {
      await ctx.reply(
        '–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–ºo! –î–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ —Å–∞–π—Ç:',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–í—ñ–¥–≤—ñ–¥–∞—Ç–∏ —Å–∞–π—Ç', url: SITE_URL }]
            ]
          }
        }
      );
    } catch (err) {
      console.error('‚ùå Error in /start handler:', err);
      ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ —ñ —Ö—É–∫ –¥–ª—è ¬´–ú–µ–Ω—é —á–∞—Ç—ñ–≤¬ª
  bot.command('chats',    showChats);
  bot.hears('–ú–µ–Ω—é —á–∞—Ç—ñ–≤', showChats);

  // –ö–æ–º–∞–Ω–¥–∞ —ñ —Ö—É–∫ –¥–ª—è ¬´–í—ñ–¥–∫—Ä–∏—Ç–∏ —á–∞—Ç¬ª
  bot.command('open_chat', (ctx) => {
    const chatId = ctx.session?.chatId;
    if (!chatId) return ctx.reply('–°–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–∫—Ä–∏–π—Ç–µ —á–∞—Ç —á–µ—Ä–µ–∑ /chats –∞–±–æ deep-link.');
    return openChat(ctx, chatId, ctx.session.offset || 0);
  });
  bot.hears('–í—ñ–¥–∫—Ä–∏—Ç–∏ —á–∞—Ç', (ctx) => {
    const chatId = ctx.session?.chatId;
    if (!chatId) return ctx.reply('–°–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–∫—Ä–∏–π—Ç–µ —á–∞—Ç —á–µ—Ä–µ–∑ /chats –∞–±–æ deep-link.');
    return openChat(ctx, chatId, ctx.session.offset || 0);
  });

  // –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—ñ–≤ inline-–∫–Ω–æ–ø–æ–∫ chat_... –∞–±–æ more_...
  bot.on('callback_query', async (ctx) => {
    const data = ctx.callbackQuery.data;
    await ctx.answerCbQuery();
    if (data.startsWith('chat_')) {
      const chatId = data.split('_')[1];
      return openChat(ctx, chatId, 0);
    }
    if (data.startsWith('more_')) {
      const [, chatId, offset] = data.split('_');
      // –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–∏—Å–ª–∞—Ç–∏ —â–µ¬ª
      if (ctx.session.moreMsgId) {
        await ctx.deleteMessage(ctx.session.moreMsgId).catch(() => {});
      }
      return openChat(ctx, chatId, Number(offset));
    }
  });

  // –û–±—Ä–æ–±–∫–∞ –±—É–¥—å-—è–∫–æ–≥–æ —Ç–µ–∫—Å—Ç—É: –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ –ø–µ—Ä–µ—Å–∏–ª–∫–∞
  bot.on('text', async (ctx) => {
    const chatId = ctx.session?.chatId;
    if (!chatId) {
      return ctx.reply('–°–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–∫—Ä–∏–π—Ç–µ —á–∞—Ç —á–µ—Ä–µ–∑ /start <chat_id> –∞–±–æ /chats.');
    }
    const userId = ctx.from.id;
    const text   = ctx.message.text;

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try {
      await axios.post(
        `${API}/chats/${chatId}/messages`,
        { sender_id: userId, content: text, content_type: 'text' }
      );
    } catch (err) {
      console.error('‚ùå Error saving message:', err);
      return ctx.reply('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.');
    }

    // –§–æ—Ä–≤–∞—Ä–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—É
    try {
      const listRes = await axios.get(`${API}/chats`, { params: { userId } });
      const session = listRes.data.find(c => c.chat_id === chatId);
      if (session?.other_user_id) {
        await ctx.telegram.sendMessage(session.other_user_id, text);
      }
    } catch (err) {
      console.error('‚ùå Error forwarding message:', err);
    }
  });
};
